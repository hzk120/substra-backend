{{- range $index, $value := .Values.users }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ template "substra.fullname" $ }}-add-users-{{ $index }}
  labels:
    app.kubernetes.io/managed-by: {{ $.Release.Service }}
    app.kubernetes.io/instance: {{ $.Release.Name }}
    helm.sh/chart: {{ $.Chart.Name }}-{{ $.Chart.Version }}
    app.kubernetes.io/name: {{ template "substra.name" $ }}-add-users-{{ $index }}
    app.kubernetes.io/part-of: {{ template "substra.name" $ }}
spec:
  template:
    spec:
      restartPolicy: OnFailure
      {{- with $.Values.backend.image.pullSecrets }}
      imagePullSecrets:
      {{- range . }}
        - name: {{ . }}
      {{- end }}
      {{- end }}
      containers:
      - name: backend
        image: "{{ $.Values.backend.image.repository }}:{{ $.Values.backend.image.tag }}"
        imagePullPolicy: "{{ $.Values.backend.image.pullPolicy }}"
        command: ["python3"]
        args: ["manage.py", "add_user", {{ .name }}, {{ .secret }}]
        env:
          - name: ORG
            value: {{ $.Values.organization.name }}
          - name: BACKEND_ORG
            value: {{ $.Values.organization.name }}
          - name: BACKEND_{{ $.Values.organization.name | upper }}_DB_NAME
            value: {{ $.Values.postgresql.postgresqlDatabase }}
          - name: BACKEND_DB_USER
            value: {{ $.Values.postgresql.postgresqlUsername }}
          - name: BACKEND_DB_PWD
            value: {{ $.Values.postgresql.postgresqlPassword }}
          - name: DATABASE_HOST
            value: {{ $.Release.Name }}-postgresql
          - name: DJANGO_SETTINGS_MODULE
            value: backend.settings.{{ $.Values.backend.settings }}
          - name: FABRIC_CFG_PATH
            value: /var/hyperledger/fabric_cfg
          - name: CORE_PEER_ADDRESS_ENV
            value: "{{ $.Values.peer.host }}:{{ $.Values.peer.port }}"
          - name: FABRIC_LOGGING_SPEC
            value: debug
          - name: DEFAULT_DOMAIN
            value: "{{ $.Values.backend.defaultDomain }}"
          - name: CELERY_BROKER_URL
            value: "amqp://{{ $.Values.rabbitmq.rabbitmq.username }}:{{ $.Values.rabbitmq.rabbitmq.password }}@{{ $.Release.Name }}-{{ $.Values.rabbitmq.host }}:{{ $.Values.rabbitmq.port }}//"
          - name: BACK_AUTH_USER
            value: {{ $.user | quote }}
          - name: BACK_AUTH_PASSWORD
            value: {{ $.password | quote }}
          - name: BACKEND_DEFAULT_PORT
            value: {{ $.Values.backend.service.port | quote}}
          - name: BACKEND_PEER_PORT
            value: "internal"
          - name: LEDGER_CONFIG_FILE
            value: /conf/{{ $.Values.organization.name }}/backend/conf.json
          - name: PYTHONUNBUFFERED
            value: "1"
          - name: MEDIA_ROOT
            value: {{ $.Values.persistence.hostPath }}/medias/
        volumeMounts:
          - mountPath: {{ $.Values.persistence.hostPath }}
            name: data
          - mountPath: /conf/{{ $.Values.organization.name }}/backend
            name: config
            readOnly: true
          - mountPath: /var/hyperledger/fabric_cfg
            name: fabric
            readOnly: true
          - mountPath: /var/hyperledger/msp/signcerts
            name: id-cert
          - mountPath: /var/hyperledger/msp/keystore
            name: id-key
          - mountPath: /var/hyperledger/msp/cacerts
            name: cacert
          - mountPath: /var/hyperledger/msp/admincerts
            name: admin-cert
          - mountPath: /var/hyperledger/tls/server/pair
            name: tls
          - mountPath: /var/hyperledger/tls/server/cert
            name: tls-rootcert
          - mountPath: /var/hyperledger/tls/client/pair
            name: tls-client
          - mountPath: /var/hyperledger/tls/client/cert
            name: tls-clientrootcert
          - mountPath: /var/hyperledger/tls/ord/cert
            name: ord-tls-rootcert
          - mountPath: /var/hyperledger/admin_msp/signcerts
            name: admin-cert
          - mountPath: /var/hyperledger/admin_msp/keystore
            name: admin-key
          - mountPath: /var/hyperledger/admin_msp/cacerts
            name: cacert
          - mountPath: /var/hyperledger/admin_msp/admincerts
            name: admin-cert
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: {{ include "substra.fullname" $ }}
      - name: config
        configMap:
          name: {{ include "substra.fullname" $ }}-backend
      - name: fabric
        configMap:
          name: {{ $.Values.secrets.fabricConfigmap }}
      - name: id-cert
        secret:
          secretName: {{ $.Values.secrets.cert }}
      - name: id-key
        secret:
          secretName: {{ $.Values.secrets.key }}
      - name: cacert
        secret:
          secretName: {{ $.Values.secrets.caCert }}
      - name: tls
        secret:
          secretName: {{ $.Values.secrets.tls }}
      - name: tls-rootcert
        secret:
          secretName: {{ $.Values.secrets.tlsRootCert }}
      - name: tls-client
        secret:
          secretName: {{ $.Values.secrets.tlsClient }}
      - name: tls-clientrootcert
        secret:
          secretName: {{ $.Values.secrets.tlsClientRootCerts }}
      - name: admin-cert
        secret:
          secretName: {{ $.Values.secrets.adminCert }}
      - name: admin-key
        secret:
          secretName: {{ $.Values.secrets.adminKey }}
      - name: ord-tls-rootcert
        secret:
          secretName: {{ $.Values.secrets.tlsRootCert }}
{{- end }}
