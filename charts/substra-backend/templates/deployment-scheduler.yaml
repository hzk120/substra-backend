apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "substra.fullname" . }}-scheduler
  labels:
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    app.kubernetes.io/name: {{ template "substra.name" . }}-scheduler
    app.kubernetes.io/part-of: {{ template "substra.name" . }}
spec:
  replicas: {{ .Values.celeryworker.replicaCount }}
  selector:
    matchLabels:
        app.kubernetes.io/name: {{ template "substra.name" . }}-scheduler
        app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ template "substra.name" . }}-scheduler
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      {{- if or .Values.pullSecretsInline .Values.backend.image.pullSecrets }}
      imagePullSecrets:
      {{- range $index, $value := .Values.pullSecretsInline }}
        - name: {{ template "substra.fullname" $ }}-pull-secret-{{ $index }}
      {{- end }}
      {{- range .Values.backend.image.pullSecrets }}
        - name: {{ . }}
      {{- end }}
      {{- end }}
      containers:
        - name: scheduler
          image: "{{ .Values.celeryworker.image.repository }}:{{ .Values.celeryworker.image.tag }}"
          {{- if .Values.celeryworker.image.pullPolicy }}
          imagePullPolicy: "{{ .Values.celeryworker.image.pullPolicy }}"
          {{- end }}
          command: ["celery"]
          args: ["-A", "backend", "worker", "-l", "info", "-n", "{{ .Values.organization.name }}", "-Q", "{{ .Values.organization.name }},scheduler,celery", "--hostname", "{{ .Values.organization.name }}.scheduler"]
          env:
            - name: ORG
              value: {{ .Values.organization.name }}
            - name: BACKEND_ORG
              value: {{ .Values.organization.name }}
            - name: BACKEND_DEFAULT_PORT
              value: "8000"
            - name: CELERY_BROKER_URL
              value: "amqp://{{ .Values.rabbitmq.rabbitmq.username }}:{{ .Values.rabbitmq.rabbitmq.password }}@{{ .Release.Name }}-{{ .Values.rabbitmq.host }}:{{ .Values.rabbitmq.port }}//"
            - name: DJANGO_SETTINGS_MODULE
              value: backend.settings.{{ .Values.backend.settings }}
            - name: PYTHONUNBUFFERED
              value: "1"
            - name: DATABASE_HOST
              value: {{ .Release.Name }}-postgresql
            - name: FABRIC_CFG_PATH_ENV
              value: /var/hyperledger/fabric_cfg
            - name: CORE_PEER_ADDRESS_ENV
              value: "{{ .Values.peer.host }}:{{ .Values.peer.port }}"
            - name: FABRIC_LOGGING_SPEC
              value: debug
            - name: LEDGER_CONFIG_FILE
              value: /conf/{{ .Values.organization.name }}/substra-backend/conf.json
          volumeMounts:
            - mountPath: /conf/{{ .Values.organization.name }}/substra-backend
              name: config
              readOnly: true
            - mountPath: /var/hyperledger/msp/signcerts
              name: id-cert
            - mountPath: /var/hyperledger/msp/keystore
              name: id-key
            - mountPath: /var/hyperledger/msp/cacerts
              name: cacert
            - mountPath: /var/hyperledger/msp/admincerts
              name: admin-cert
            - mountPath: /var/hyperledger/tls/server/pair
              name: tls
            - mountPath: /var/hyperledger/tls/server/cert
              name: tls-rootcert
            - mountPath: /var/hyperledger/tls/client/pair
              name: tls-client
            - mountPath: /var/hyperledger/tls/client/cert
              name: tls-clientrootcert
            - mountPath: /var/hyperledger/tls/ord/cert
              name: ord-tls-rootcert
            - mountPath: /var/hyperledger/admin_msp/signcerts
              name: admin-cert
            - mountPath: /var/hyperledger/admin_msp/keystore
              name: admin-key
            - mountPath: /var/hyperledger/admin_msp/cacerts
              name: cacert
            - mountPath: /var/hyperledger/admin_msp/admincerts
              name: admin-cert
          resources:
            {{- toYaml .Values.celeryworker.resources | nindent 12 }}
      volumes:
      - name: config
        configMap:
          name: {{ include "substra.fullname" . }}-backend
      - name: fabric
        configMap:
          name: {{ $.Values.secrets.fabricConfigmap }}
      - name: id-cert
        secret:
          secretName: {{ $.Values.secrets.cert }}
      - name: id-key
        secret:
          secretName: {{ $.Values.secrets.key }}
      - name: cacert
        secret:
          secretName: {{ $.Values.secrets.caCert }}
      - name: tls
        secret:
          secretName: {{ $.Values.secrets.tls }}
      - name: tls-rootcert
        secret:
          secretName: {{ $.Values.secrets.tlsRootCert }}
      - name: tls-client
        secret:
          secretName: {{ $.Values.secrets.tlsClient }}
      - name: tls-clientrootcert
        secret:
          secretName: {{ $.Values.secrets.tlsClientRootCerts }}
      - name: admin-cert
        secret:
          secretName: {{ $.Values.secrets.adminCert }}
      - name: admin-key
        secret:
          secretName: {{ $.Values.secrets.adminKey }}
      - name: ord-tls-rootcert
        secret:
          secretName: {{ $.Values.secrets.tlsRootCert }}
    {{- with .Values.celeryworker.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.celeryworker.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.celeryworker.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
